{"version":3,"file":"sf_register.js","mappings":";;;;;;;;;;;;;;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;;;;;;;;;;;;;;;ACrKsE;AACtE;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,mEAA0B;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8FAA8F;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC/JA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACNsC;AACtC,uBAAuB,mDAAU","sources":["webpack://sf_register/./Sources/TypeScript/PasswordStrengthCalculator.ts","webpack://sf_register/./Sources/TypeScript/SfRegister.ts","webpack://sf_register/webpack/bootstrap","webpack://sf_register/webpack/runtime/define property getters","webpack://sf_register/webpack/runtime/hasOwnProperty shorthand","webpack://sf_register/webpack/runtime/make namespace object","webpack://sf_register/./Sources/TypeScript/sf_register.ts"],"sourcesContent":["export default class PasswordStrengthCalculator {\n    /**\n     * password length:\n     *   level 0 (0 point): less than 4 characters\n     *   level 1 (6 points): between 5 and 7 characters\n     *   level 2 (12 points): between 8 and 15 characters\n     *   level 3 (18 points): 16 or more characters\n     */\n    verdictLength(password) {\n        const length = password.length;\n        let score, log;\n        switch (true) {\n            case length > 0 && length < 5:\n                log = '3 points for length (' + length + ')';\n                score = 3;\n                break;\n            case length > 4 && length < 8:\n                log = '6 points for length (' + length + ')';\n                score = 6;\n                break;\n            case length > 7 && length < 16:\n                log = '12 points for length (' + length + ')';\n                score = 12;\n                break;\n            default:\n                log = '18 points for length (' + length + ')';\n                score = 18;\n                break;\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * letters:\n     *   level 0 (0 points): no letters\n     *   level 1 (5 points): all letters are lower case\n     *   level 1 (5 points): all letters are upper case\n     *   level 2 (7 points): letters are mixed case\n     */\n    verdictLetter(password) {\n        const matchLower = password.match(/[a-z]/), matchUpper = password.match(/[A-Z]/);\n        let score = 0, log = '';\n        if (matchLower) {\n            if (matchUpper) {\n                score = 7;\n                log = '7 points for letters are mixed';\n            }\n            else {\n                score = 5;\n                log = '5 point for at least one lower case char';\n            }\n        }\n        else if (matchUpper) {\n            score = 5;\n            log = '5 points for at least one upper case char';\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * numbers:\n     *   level 0 (0 points): no numbers exist\n     *   level 1 (5 points): one number exists\n     *   level 1 (7 points): 3 or more numbers exists\n     */\n    verdictNumbers(password) {\n        const numbers = password.replace(/\\D/gi, '');\n        let score = 0, log = '';\n        if (numbers.length > 1) {\n            score = 7;\n            log = '7 points for at least three numbers';\n        }\n        else if (numbers.length > 0) {\n            score = 5;\n            log = '5 points for at least one number';\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * special characters:\n     *   level 0 (0 points): no special characters\n     *   level 1 (5 points): one special character exists\n     *   level 2 (10 points): more than one special character exists\n     */\n    verdictSpecialChars(password) {\n        const specialCharacters = password.replace(/[\\w\\s]/gi, '');\n        let score = 0, log = '';\n        if (specialCharacters.length > 1) {\n            score = 10;\n            log = '10 points for at least two special chars';\n        }\n        else if (specialCharacters.length > 0) {\n            score = 5;\n            log = '5 points for at least one special char';\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * combinations:\n     * level 0 (1 points): mixed case letters\n     * level 0 (1 points): letters and numbers\n     * level 1 (2 points): mixed case letters and numbers\n     * level 3 (4 points): letters, numbers and special characters\n     * level 4 (6 points): mixed case letters, numbers and special characters\n     */\n    verdictCombos(letter, number, special) {\n        let score = 0, log = '';\n        if (letter === 7 && number > 0 && special > 0) {\n            score = 6;\n            log = '6 combo points for letters, numbers and special characters';\n        }\n        else if (letter > 0 && number > 0 && special > 0) {\n            score = 4;\n            log = '4 combo points for letters, numbers and special characters';\n        }\n        else if (letter === 7 && number > 0) {\n            score = 2;\n            log = '2 combo points for mixed case letters and numbers';\n        }\n        else if (letter > 0 && number > 0) {\n            score = 1;\n            log = '1 combo points for letters and numbers';\n        }\n        else if (letter === 7) {\n            score = 1;\n            log = '1 combo points for mixed case letters';\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * final verdict base on final score\n     */\n    finalVerdict(finalScore) {\n        let strVerdict;\n        if (finalScore < 16) {\n            strVerdict = 'very weak';\n        }\n        else if (finalScore > 15 && finalScore < 25) {\n            strVerdict = 'weak';\n        }\n        else if (finalScore > 24 && finalScore < 35) {\n            strVerdict = 'mediocre';\n        }\n        else if (finalScore > 34 && finalScore < 45) {\n            strVerdict = 'strong';\n        }\n        else {\n            strVerdict = 'stronger';\n        }\n        return strVerdict;\n    }\n    calculate(password) {\n        const lengthVerdict = this.verdictLength(password), letterVerdict = this.verdictLetter(password), numberVerdict = this.verdictNumbers(password), specialVerdict = this.verdictSpecialChars(password), combosVerdict = this.verdictCombos(letterVerdict.score, numberVerdict.score, specialVerdict.score);\n        const score = lengthVerdict.score\n            + letterVerdict.score\n            + numberVerdict.score\n            + specialVerdict.score\n            + combosVerdict.score, log = [\n            lengthVerdict.log,\n            letterVerdict.log,\n            numberVerdict.log,\n            specialVerdict.log,\n            combosVerdict.log,\n            score + ' points final score'\n        ].join('\\n');\n        return { score: score, verdict: this.finalVerdict(score), log: log };\n    }\n}\n","import PasswordStrengthCalculator from './PasswordStrengthCalculator';\nconst document = window.document;\nexport default class SfRegister {\n    constructor() {\n        this.loading = false;\n        this.ajaxRequest = null;\n        this.barGraph = null;\n        this.passwordStrengthCalculator = null;\n        this.zone = null;\n        this.zoneEmpty = null;\n        this.zoneLoading = null;\n        // Attach content loaded element with callback to document\n        document.addEventListener('DOMContentLoaded', this.contentLoaded.bind(this));\n    }\n    /**\n     * Callback after content was loaded\n     */\n    contentLoaded() {\n        this.zone = document.getElementById('sfrZone');\n        this.zoneEmpty = document.getElementById('sfrZone_empty');\n        this.zoneLoading = document.getElementById('sfrZone_loading');\n        this.barGraph = document.getElementById('bargraph');\n        if (this.barGraph) {\n            this.barGraph.classList.add('show');\n            this.passwordStrengthCalculator = new PasswordStrengthCalculator();\n            this.attachToElementById('sfrpassword', 'keyup', this.callTestPassword.bind(this));\n        }\n        this.attachToElementById('sfrCountry', 'change', this.countryChanged.bind(this));\n        this.attachToElementById('sfrCountry', 'keyup', this.countryChanged.bind(this));\n        this.attachToElementById('uploadButton', 'change', this.uploadFile.bind(this));\n        this.attachToElementById('removeImageButton', 'click', this.removeFile.bind(this));\n    }\n    /**\n     * Add class d-block remove class d-none\n     */\n    showElement(element) {\n        element.classList.remove('d-none');\n        element.classList.add('d-block');\n    }\n    /**\n     * Add class d-none remove class d-block\n     */\n    hideElement(element) {\n        element.classList.remove('d-block');\n        element.classList.add('d-none');\n    }\n    attachToElementById(id, eventName, callback) {\n        const element = document.getElementById(id);\n        this.attachToElement(element, eventName, callback);\n    }\n    attachToElement(element, eventName, callback) {\n        if (element) {\n            element.addEventListener(eventName, callback);\n        }\n    }\n    /**\n     * Gets password meter element and sets the value with\n     * the result of the calculate password strength function\n     */\n    callTestPassword(event) {\n        const element = event.target, meterResult = this.passwordStrengthCalculator.calculate(element.value);\n        if (this.barGraph.tagName.toLowerCase() === 'meter') {\n            this.barGraph.value = meterResult.score;\n        }\n        else {\n            const barGraph = this.barGraph, percentScore = Math.min((Math.floor(meterResult.score / 3.4)), 10), blinds = (barGraph.contentDocument || barGraph.contentWindow.document).getElementsByClassName('blind');\n            for (let index = 0; index < blinds.length; index++) {\n                const blind = blinds[index];\n                if (index < percentScore) {\n                    this.hideElement(blind);\n                }\n                else {\n                    this.showElement(blind);\n                }\n            }\n        }\n    }\n    loadCountryZonesByCountry(countrySelectedValue) {\n        this.loading = true;\n        this.zone.disabled = true;\n        this.hideElement(this.zoneEmpty);\n        this.showElement(this.zoneLoading);\n        this.ajaxRequest = new XMLHttpRequest();\n        this.ajaxRequest.onload = this.xhrReadyOnLoad.bind(this);\n        this.ajaxRequest.open('POST', '/index.php?ajax=sf_register');\n        this.ajaxRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n        this.ajaxRequest.send('tx_sfregister[action]=zones&tx_sfregister[parent]=' + countrySelectedValue);\n    }\n    /**\n     * Change value of zone selectbox\n     */\n    countryChanged(event) {\n        if ((event.type === 'change'\n            || (event.type === 'keyup' && (event.keyCode === 40 || event.keyCode === 38)))\n            && this.loading !== true) {\n            if (this.zone) {\n                const target = (event.target || event.srcElement), countrySelectedValue = target.options[target.selectedIndex].value;\n                this.loadCountryZonesByCountry(countrySelectedValue);\n            }\n        }\n    }\n    /**\n     * Process ajax response and display error message or\n     * hand data received to add zone option function\n     */\n    xhrReadyOnLoad(stateChanged) {\n        const xhrResponse = stateChanged.target;\n        if (xhrResponse.readyState === 4 && xhrResponse.status === 200) {\n            const xhrResponseData = JSON.parse(xhrResponse.responseText);\n            this.hideElement(this.zoneLoading);\n            if (xhrResponseData.status === 'error' || xhrResponseData.data.length === 0) {\n                this.showElement(this.zoneEmpty);\n            }\n            else {\n                this.addZoneOptions(xhrResponseData.data);\n            }\n        }\n        this.loading = false;\n    }\n    /**\n     * Process data received with xhr response\n     */\n    addZoneOptions(options) {\n        while (this.zone.length) {\n            this.zone.removeChild(this.zone[0]);\n        }\n        options.forEach((option, index) => {\n            this.zone.options[index] = new Option(option.label, option.value);\n        });\n        this.zone.disabled = false;\n    }\n    /**\n     * Adds a preview information about file to upload in a label\n     */\n    uploadFile() {\n        const information = document.getElementById('uploadFile');\n        if (information) {\n            information.value = this.value;\n        }\n    }\n    /**\n     * Handle remove image button clicked\n     */\n    removeFile() {\n        const remove = document.getElementById('removeImage');\n        if (remove) {\n            remove.value = '1';\n        }\n        this.submitForm();\n    }\n    /**\n     * Selects the form and triggers submit\n     */\n    submitForm() {\n        const form = document.getElementById('sfrForm');\n        if (form) {\n            form.submit();\n        }\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import SfRegister from './SfRegister';\nconst sfRegister = new SfRegister();\n"],"names":[],"sourceRoot":""}