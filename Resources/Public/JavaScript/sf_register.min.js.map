{"version":3,"file":"sf_register.min.js","mappings":"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","sources":["webpack://sf_register/./Sources/TypeScript/PasswordStrengthCalculator.ts","webpack://sf_register/./Sources/TypeScript/SfRegister.ts","webpack://sf_register/./Sources/TypeScript/sf_register.ts"],"sourcesContent":["export default class PasswordStrengthCalculator {\n    /**\n     * password length:\n     *   level 0 (0 point): less than 4 characters\n     *   level 1 (6 points): between 5 and 7 characters\n     *   level 2 (12 points): between 8 and 15 characters\n     *   level 3 (18 points): 16 or more characters\n     */\n    verdictLength(password) {\n        const length = password.length;\n        let score, log;\n        switch (true) {\n            case length > 0 && length < 5:\n                log = '3 points for length (' + length + ')';\n                score = 3;\n                break;\n            case length > 4 && length < 8:\n                log = '6 points for length (' + length + ')';\n                score = 6;\n                break;\n            case length > 7 && length < 16:\n                log = '12 points for length (' + length + ')';\n                score = 12;\n                break;\n            default:\n                log = '18 points for length (' + length + ')';\n                score = 18;\n                break;\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * letters:\n     *   level 0 (0 points): no letters\n     *   level 1 (5 points): all letters are lower case\n     *   level 1 (5 points): all letters are upper case\n     *   level 2 (7 points): letters are mixed case\n     */\n    verdictLetter(password) {\n        const matchLower = password.match(/[a-z]/), matchUpper = password.match(/[A-Z]/);\n        let score = 0, log = '';\n        if (matchLower) {\n            if (matchUpper) {\n                score = 7;\n                log = '7 points for letters are mixed';\n            }\n            else {\n                score = 5;\n                log = '5 point for at least one lower case char';\n            }\n        }\n        else if (matchUpper) {\n            score = 5;\n            log = '5 points for at least one upper case char';\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * numbers:\n     *   level 0 (0 points): no numbers exist\n     *   level 1 (5 points): one number exists\n     *   level 1 (7 points): 3 or more numbers exists\n     */\n    verdictNumbers(password) {\n        const numbers = password.replace(/\\D/gi, '');\n        let score = 0, log = '';\n        if (numbers.length > 1) {\n            score = 7;\n            log = '7 points for at least three numbers';\n        }\n        else if (numbers.length > 0) {\n            score = 5;\n            log = '5 points for at least one number';\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * special characters:\n     *   level 0 (0 points): no special characters\n     *   level 1 (5 points): one special character exists\n     *   level 2 (10 points): more than one special character exists\n     */\n    verdictSpecialChars(password) {\n        const specialCharacters = password.replace(/[\\w\\s]/gi, '');\n        let score = 0, log = '';\n        if (specialCharacters.length > 1) {\n            score = 10;\n            log = '10 points for at least two special chars';\n        }\n        else if (specialCharacters.length > 0) {\n            score = 5;\n            log = '5 points for at least one special char';\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * combinations:\n     * level 0 (1 points): mixed case letters\n     * level 0 (1 points): letters and numbers\n     * level 1 (2 points): mixed case letters and numbers\n     * level 3 (4 points): letters, numbers and special characters\n     * level 4 (6 points): mixed case letters, numbers and special characters\n     */\n    verdictCombos(letter, number, special) {\n        let score = 0, log = '';\n        if (letter === 7 && number > 0 && special > 0) {\n            score = 6;\n            log = '6 combo points for letters, numbers and special characters';\n        }\n        else if (letter > 0 && number > 0 && special > 0) {\n            score = 4;\n            log = '4 combo points for letters, numbers and special characters';\n        }\n        else if (letter === 7 && number > 0) {\n            score = 2;\n            log = '2 combo points for mixed case letters and numbers';\n        }\n        else if (letter > 0 && number > 0) {\n            score = 1;\n            log = '1 combo points for letters and numbers';\n        }\n        else if (letter === 7) {\n            score = 1;\n            log = '1 combo points for mixed case letters';\n        }\n        return { score: score, log: log };\n    }\n    /**\n     * final verdict base on final score\n     */\n    finalVerdict(finalScore) {\n        let strVerdict;\n        if (finalScore < 16) {\n            strVerdict = 'very weak';\n        }\n        else if (finalScore > 15 && finalScore < 25) {\n            strVerdict = 'weak';\n        }\n        else if (finalScore > 24 && finalScore < 35) {\n            strVerdict = 'mediocre';\n        }\n        else if (finalScore > 34 && finalScore < 45) {\n            strVerdict = 'strong';\n        }\n        else {\n            strVerdict = 'stronger';\n        }\n        return strVerdict;\n    }\n    calculate(password) {\n        const lengthVerdict = this.verdictLength(password), letterVerdict = this.verdictLetter(password), numberVerdict = this.verdictNumbers(password), specialVerdict = this.verdictSpecialChars(password), combosVerdict = this.verdictCombos(letterVerdict.score, numberVerdict.score, specialVerdict.score);\n        const score = lengthVerdict.score\n            + letterVerdict.score\n            + numberVerdict.score\n            + specialVerdict.score\n            + combosVerdict.score, log = [\n            lengthVerdict.log,\n            letterVerdict.log,\n            numberVerdict.log,\n            specialVerdict.log,\n            combosVerdict.log,\n            score + ' points final score'\n        ].join('\\n');\n        return { score: score, verdict: this.finalVerdict(score), log: log };\n    }\n}\n","import PasswordStrengthCalculator from './PasswordStrengthCalculator';\nconst document = window.document;\nexport default class SfRegister {\n    constructor() {\n        this.loading = false;\n        this.ajaxRequest = null;\n        this.barGraph = null;\n        this.passwordStrengthCalculator = null;\n        this.zone = null;\n        this.zoneEmpty = null;\n        this.zoneLoading = null;\n        // Attach content loaded element with callback to document\n        document.addEventListener('DOMContentLoaded', this.contentLoaded.bind(this));\n    }\n    /**\n     * Callback after content was loaded\n     */\n    contentLoaded() {\n        this.zone = document.getElementById('sfrZone');\n        this.zoneEmpty = document.getElementById('sfrZone_empty');\n        this.zoneLoading = document.getElementById('sfrZone_loading');\n        this.barGraph = document.getElementById('bargraph');\n        if (this.barGraph) {\n            this.barGraph.classList.add('show');\n            this.passwordStrengthCalculator = new PasswordStrengthCalculator();\n            this.attachToElementById('sfrpassword', 'keyup', this.callTestPassword.bind(this));\n        }\n        this.attachToElementById('sfrCountry', 'change', this.countryChanged.bind(this));\n        this.attachToElementById('sfrCountry', 'keyup', this.countryChanged.bind(this));\n        this.attachToElementById('uploadButton', 'change', this.uploadFile.bind(this));\n        this.attachToElementById('removeImageButton', 'click', this.removeFile.bind(this));\n    }\n    /**\n     * Add class d-block remove class d-none\n     */\n    showElement(element) {\n        element.classList.remove('d-none');\n        element.classList.add('d-block');\n    }\n    /**\n     * Add class d-none remove class d-block\n     */\n    hideElement(element) {\n        element.classList.remove('d-block');\n        element.classList.add('d-none');\n    }\n    attachToElementById(id, eventName, callback) {\n        const element = document.getElementById(id);\n        this.attachToElement(element, eventName, callback);\n    }\n    attachToElement(element, eventName, callback) {\n        if (element) {\n            element.addEventListener(eventName, callback);\n        }\n    }\n    /**\n     * Gets password meter element and sets the value with\n     * the result of the calculate password strength function\n     */\n    callTestPassword(event) {\n        const element = event.target, meterResult = this.passwordStrengthCalculator.calculate(element.value);\n        if (this.barGraph.tagName.toLowerCase() === 'meter') {\n            this.barGraph.value = meterResult.score;\n        }\n        else {\n            const barGraph = this.barGraph, percentScore = Math.min((Math.floor(meterResult.score / 3.4)), 10), blinds = (barGraph.contentDocument || barGraph.contentWindow.document).getElementsByClassName('blind');\n            for (let index = 0; index < blinds.length; index++) {\n                const blind = blinds[index];\n                if (index < percentScore) {\n                    this.hideElement(blind);\n                }\n                else {\n                    this.showElement(blind);\n                }\n            }\n        }\n    }\n    loadCountryZonesByCountry(countrySelectedValue) {\n        this.loading = true;\n        this.zone.disabled = true;\n        this.hideElement(this.zoneEmpty);\n        this.showElement(this.zoneLoading);\n        this.ajaxRequest = new XMLHttpRequest();\n        this.ajaxRequest.onload = this.xhrReadyOnLoad.bind(this);\n        this.ajaxRequest.open('POST', '/index.php?ajax=sf_register');\n        this.ajaxRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n        this.ajaxRequest.send('tx_sfregister[action]=zones&tx_sfregister[parent]=' + countrySelectedValue);\n    }\n    /**\n     * Change value of zone selectbox\n     */\n    countryChanged(event) {\n        if ((event.type === 'change'\n            || (event.type === 'keyup' && (event.keyCode === 40 || event.keyCode === 38)))\n            && this.loading !== true) {\n            if (this.zone) {\n                const target = (event.target || event.srcElement), countrySelectedValue = target.options[target.selectedIndex].value;\n                this.loadCountryZonesByCountry(countrySelectedValue);\n            }\n        }\n    }\n    /**\n     * Process ajax response and display error message or\n     * hand data received to add zone option function\n     */\n    xhrReadyOnLoad(stateChanged) {\n        const xhrResponse = stateChanged.target;\n        if (xhrResponse.readyState === 4 && xhrResponse.status === 200) {\n            const xhrResponseData = JSON.parse(xhrResponse.responseText);\n            this.hideElement(this.zoneLoading);\n            if (xhrResponseData.status === 'error' || xhrResponseData.data.length === 0) {\n                this.showElement(this.zoneEmpty);\n            }\n            else {\n                this.addZoneOptions(xhrResponseData.data);\n            }\n        }\n        this.loading = false;\n    }\n    /**\n     * Process data received with xhr response\n     */\n    addZoneOptions(options) {\n        while (this.zone.length) {\n            this.zone.removeChild(this.zone[0]);\n        }\n        options.forEach((option, index) => {\n            this.zone.options[index] = new Option(option.label, option.value);\n        });\n        this.zone.disabled = false;\n    }\n    /**\n     * Adds a preview information about file to upload in a label\n     */\n    uploadFile() {\n        const information = document.getElementById('uploadFile');\n        if (information) {\n            information.value = this.value;\n        }\n    }\n    /**\n     * Handle remove image button clicked\n     */\n    removeFile() {\n        const remove = document.getElementById('removeImage');\n        if (remove) {\n            remove.value = '1';\n        }\n        this.submitForm();\n    }\n    /**\n     * Selects the form and triggers submit\n     */\n    submitForm() {\n        const form = document.getElementById('sfrForm');\n        if (form) {\n            form.submit();\n        }\n    }\n}\n","import SfRegister from './SfRegister';\nconst sfRegister = new SfRegister();\n"],"names":["PasswordStrengthCalculator","verdictLength","password","length","score","log","verdictLetter","matchLower","match","matchUpper","verdictNumbers","numbers","replace","verdictSpecialChars","specialCharacters","verdictCombos","letter","number","special","finalVerdict","finalScore","strVerdict","calculate","lengthVerdict","this","letterVerdict","numberVerdict","specialVerdict","combosVerdict","join","verdict","window","document","constructor","loading","ajaxRequest","barGraph","passwordStrengthCalculator","zone","zoneEmpty","zoneLoading","addEventListener","contentLoaded","bind","getElementById","classList","add","attachToElementById","callTestPassword","countryChanged","uploadFile","removeFile","showElement","element","remove","hideElement","id","eventName","callback","attachToElement","event","target","meterResult","value","tagName","toLowerCase","percentScore","Math","min","floor","blinds","contentDocument","contentWindow","getElementsByClassName","index","blind","loadCountryZonesByCountry","countrySelectedValue","disabled","XMLHttpRequest","onload","xhrReadyOnLoad","open","setRequestHeader","send","type","keyCode","srcElement","options","selectedIndex","stateChanged","xhrResponse","readyState","status","xhrResponseData","JSON","parse","responseText","data","addZoneOptions","removeChild","forEach","option","Option","label","information","submitForm","form","submit"],"sourceRoot":""}