name: build

on:
  push:
    branches: [ develop, master ]
    tags: [ '*' ]
  pull_request:
    branches: [ develop ]

jobs:
  xliff:
    runs-on: ubuntu-20.04

    name: XML Lint (Xliff)
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install libxml2-utils
        run: sudo apt install libxml2-utils

      - name: Running xmllint (Xliff)
        run: find Resources/Private/Language/ -name '*.xlf' -type f | xargs xmllint --noout --schema .Build/xliff-core-1.2-strict.xsd

  lint:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        env:
          - { PHP: 7.4 }

    name: Lint PHP ${{ matrix.php-versions }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.env.PHP }}

      - name: Running php lint with ${{ matrix.env.PHP }}
        run: errors=$(find . -name \*.php ! -path "./.Build/*" -exec php -d display_errors=stderr -l "{}" 2>&1 >/dev/null \;) && echo "${errors}" && test -z "${errors}"

  phpunit:
    needs: lint

    runs-on: ubuntu-20.04

    continue-on-error: ${{ matrix.env.experimental == true }}
    strategy:
      fail-fast: false
      matrix:
        env:
          - { PHP: 7.4, TYPO3_VERSION: "^11.5", TESTING_FRAMEWORK: "^6.6.2" }
          - { PHP: 7.4, TYPO3_VERSION: "^11.5.2", TESTING_FRAMEWORK: "^6.6.2", PREFER_LOWEST: "--prefer-lowest" }
          - { PHP: 8.1, TYPO3_VERSION: "dev-main", TESTING_FRAMEWORK: "dev-main", experimental: true }

    env: ${{ matrix.env }}

    name: Run unit and/or functional tests on TYPO3 ${{ matrix.env.TYPO3_VERSION }} with PHP${{ matrix.env.PHP }} and testing framework ${{ matrix.env.TESTING_FRAMEWORK }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.env.PHP }}
          tools: composer
          extensions: pdo, sqlite3

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ~/.composer/cache
          key: dependencies-composer-${{ hashFiles('composer.json') }}

      - name: Ensure stability dev
        if: ${{ matrix.env.TYPO3_VERSION == 'dev-main' }}
        run: |
          composer config minimum-stability dev
          composer config prefer-stable true

      - name: Install TYPO3 core
        run: composer require typo3/cms-core="${TYPO3_VERSION}" ${PREFER_LOWEST};

      - name: Install testing framework ${{ matrix.env.TESTING_FRAMEWORK }}
        if: ${{ matrix.env.TESTING_FRAMEWORK }}
        run: composer require --dev typo3/testing-framework="${TESTING_FRAMEWORK}";

      - name: Run ${{ matrix.env.TYPO3_VERSION }} unit tests with ${{ matrix.env.PHP }}
        run: |
          php .Build/Web/vendor/bin/phpunit --colors -c .Build/Web/vendor/typo3/testing-framework/Resources/Core/Build/UnitTests.xml Tests/Unit/;

      - name: Run ${{ matrix.env.TYPO3_VERSION }} functional tests with ${{ matrix.env.PHP }} and testing framework ${{ matrix.env.TESTING_FRAMEWORK }} ${{ matrix.env.PREFER_LOWEST }}
        run: |
          TYPO3_PATH_WEB="$PWD/.Build/Web" typo3DatabaseDriver="pdo_sqlite" php .Build/Web/vendor/bin/phpunit --colors -c .Build/Web/vendor/typo3/testing-framework/Resources/Core/Build/FunctionalTests.xml Tests/Functional/;

      - name: Reset composer.json
        run: git checkout composer.json;

  TERUpload:
    needs: [ xliff, lint, phpunit ]
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false

    name: TYPO3 TER release
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Publish to TER
        uses: tomasnorre/typo3-upload-ter@v2
        with:
          api-token: ${{ secrets.TYPO3_API_TOKEN }}
